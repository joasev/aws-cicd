AWSTemplateFormatVersion: 2010-09-09
Description: Internal CICD Pipeline

Parameters:
  CodeCommitRepoName:
    Type: String
    Description: Name of git repository in CodeCommit.
    Default: myAppRepo
  CodeBuildS3BucketArtifacts:
    Type: String
    Description: S3 bucket name where CodeBuild will store its artifacts such as revisions.
    Default: apps-joaco
  CodePipelineS3BucketArtifacts:
    Type: String
    Description: S3 bucket name where CodePipeline will store its artifacts such as revisions.
    Default: apps-joaco
  Email:
    Description: Email address to subscribe to SNS topics.
    Type: String
    Default: my@email.com

Resources:


## Roles ##

  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Sub: CodeBuildRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      Policies:
        - PolicyName: "CodeBuildCICDAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "codecommit:GitPull"
                Resource:
                  - Fn::Sub: arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepoName}
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                Resource:
                  - Fn::Sub: arn:aws:s3:::codepipeline-${AWS::Region}-*
                  - Fn::Sub: arn:aws:s3:::${CodePipelineS3BucketArtifacts}/*
                  - Fn::Sub: arn:aws:s3:::${CodePipelineS3BucketArtifacts}

  CodeDeployServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName:
        Fn::Sub: CodeDeployServiceRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: "CodeDeployCICDAccessPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeInstanceStatus'
                  - 'ec2:TerminateInstances'
                  - 'tag:GetTags'
                  - 'tag:GetResources'
                  - 'sns:Publish'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                Resource: '*'


  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Sub: CodePipelineRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: "CodePipelineCICDAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:DeleteObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                  - "s3:PutObject"
                  - "s3:GetBucketPolicy"
                Resource:
                  - Fn::Sub: arn:aws:s3:::${CodePipelineS3BucketArtifacts}
                  - Fn::Sub: arn:aws:s3:::${CodePipelineS3BucketArtifacts}/*
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource: '*'
              - Effect: "Allow"
                Action:
                  - "codecommit:ListBranches"
                  - "codecommit:ListRepositories"
                  - "codecommit:BatchGetRepositories"
                  - "codecommit:Get*"
                  - "codecommit:GitPull"
                  - "codecommit:UploadArchive"
                Resource:
                  - Fn::Sub: arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepoName}
              - Effect: "Allow"
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                Resource:
                  - Fn::Sub: arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/BuildRestAppCFN-${AWS::StackName}
                  - Fn::Sub: arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:build/BuildRestAppCFN-${AWS::StackName}:*
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'


## CodeCommit ##
 
  CodeCommitRepo:
    Type: AWS::CodeCommit::Repository
    Properties: 
      RepositoryDescription: Repository for pipelined application
      RepositoryName: !Ref CodeCommitRepoName

## CodeBuild ##

## CodeDeploy ##

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties: 
      ApplicationName: !Sub CodeDeployApplication-${AWS::StackName}
      ComputePlatform: Server

  CodeDeployDeploymentGroupDEV: 
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
      ApplicationName: !Ref CodeDeployApplication
      Ec2TagFilters: 
        - Key: Name
          Value: dev
          Type: "KEY_AND_VALUE"
      ServiceRoleArn: !GetAtt [ CodeDeployServiceRole, Arn ]      
      DeploymentGroupName: !Sub DeploymentGroup-${AWS::StackName}

  CodeDeployDeploymentGroupPROD: 
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
      ApplicationName: !Ref CodeDeployApplication
      Ec2TagFilters: 
        - Key: Name
          Value: prod
          Type: "KEY_AND_VALUE"
      ServiceRoleArn: !GetAtt [ CodeDeployServiceRole, Arn ]      
      DeploymentGroupName: !Sub CodeDeployDeploymentGroupPROD-${AWS::StackName}


## CodePipeline ##

  DeployPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub CICDPipeline-${AWS::StackName}
      RoleArn: !GetAtt [ CodePipelineRole, Arn ]
      Stages:
        - Name: CodeCommitSource
          Actions:
            - Name: GetSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: ApplicationOutput
              Configuration:
                BranchName: master
                RepositoryName:
                  Ref: CodeCommitRepoName
              RunOrder: 1

        - Name: CodeDeployToDev
          Actions:
            - Name: CodeDeploy
              InputArtifacts:
                - Name: ApplicationOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeploy
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroupDEV
              RunOrder: 1


        - Name: ProductionApproval
          Actions:
            - Name: ProdApproval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual
              Configuration:
                NotificationArn: !Ref CodePipelineSNSTopic
                CustomData: Approve Production deployment
              RunOrder: 1
        - Name: DeployToProduction
          Actions:
            - Name: CodeDeploy
              InputArtifacts:
                - Name: ApplicationOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeploy
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroupPROD
              RunOrder: 1

      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineS3BucketArtifacts
  
  CodePipelineSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref Email
          Protocol: email


  ArtifactS3:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Ref CodePipelineS3BucketArtifacts


  